{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quickstart Guide \u00b6 \ud83e\ude9b Develop \u00b6 First install workstation pyenv install -s 3 .8.12 pyenv local 3 .8.12 poetry lock nox -s pre-commit -- install nox -s pre-commit -- install --hook-type commit-msg","title":"Home"},{"location":"#quickstart-guide","text":"","title":"Quickstart Guide"},{"location":"#develop","text":"First install workstation pyenv install -s 3 .8.12 pyenv local 3 .8.12 poetry lock nox -s pre-commit -- install nox -s pre-commit -- install --hook-type commit-msg","title":"\ud83e\ude9b Develop"},{"location":"contributing/","text":"Contributor Guide \u00b6 This project is open-source under the MIT license and welcomes contributions in the form of bug reports, feature requests, and pull requests. Here is a list of important resources for contributors: Source Code Documentation Issue Tracker How to report a bug \u00b6 Report bugs on the Issue Tracker . When filing an issue, make sure to answer these questions: Which operating system and Python version are you using? Which version of this project are you using? What did you do? What did you expect to see? What did you see instead? The best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue. How to request a feature \u00b6 Request features on the Issue Tracker . How to set up your development environment \u00b6 Preferred method Install the package and setup your workstation pip install workstation-cli --user workstation-install If you don't want to setup your workstation with this package make sure to have Python 3.8+ and the following tools: Poetry Nox nox-poetry Fork the repository on GitHub , and clone the fork to your local machine. On first install pyenv install -s 3 .8.12 pyenv local 3 .8.12 poetry lock nox -s pre-commit -- install nox -s pre-commit -- install --hook-type commit-msg How to run your code \u00b6 First, install the project and its dependencies to the Poetry environment: poetry install Run interactive session Invoke command-line interface poetry run python poetry run workstation-install How to test the project \u00b6 Run the test suite using Nox : $ nox -r How to submit changes \u00b6 Create a branch for your changes: git switch --create my-new-branch main Create a series of small, single-purpose commits: git add <files> git commit Push your branch to GitHub: git push --set-upstream origin my-topic-branch Open a pull request to submit changes to this project. Select your branch from the Branch menu. Click New pull request . Enter the title for the pull request. Enter a description for the pull request. Apply a label Click Create pull request . Your pull request needs to meet the following guidelines for acceptance: The Nox test suite must pass without errors and warnings. Include unit tests. This project maintains 100% code coverage. If your changes add functionality, update the documentation accordingly. Release notes are pre-filled with the titles of merged pull requests. How to accept a pull request \u00b6 Before accepting a pull request, go through the following checklist: The PR must pass all checks. The PR must have a descriptive title. The PR should be labelled with the kind of change. If all checks are marked as passed, merge the pull request using the squash-merge strategy: Click Squash and Merge . Click Confirm squash and merge . Click Delete branch . How to make a release \u00b6 Before making a release, go through the following checklist: All pull requests for the release have been merged. The default branch passes all checks. Releases are triggered by a version bump on the default branch. Do this in a separate pull request: Switch to a branch. Bump the version using the release session in nox . Push to GitHub. Open a pull request. Merge the pull request. The individual steps for bumping the version are: git switch --create release main nox -s release -- --patch git push origin release To let semantic-release decide what version number to update to, use: nox -s release Before merging the pull request for the release, go through the following checklist: The pull request passes all checks. The development release on TestPyPI_ looks good. All pull requests for the release have been merged.","title":"Contributing"},{"location":"contributing/#contributor-guide","text":"This project is open-source under the MIT license and welcomes contributions in the form of bug reports, feature requests, and pull requests. Here is a list of important resources for contributors: Source Code Documentation Issue Tracker","title":"Contributor Guide"},{"location":"contributing/#how-to-report-a-bug","text":"Report bugs on the Issue Tracker . When filing an issue, make sure to answer these questions: Which operating system and Python version are you using? Which version of this project are you using? What did you do? What did you expect to see? What did you see instead? The best way to get your bug fixed is to provide a test case, and/or steps to reproduce the issue.","title":"How to report a bug"},{"location":"contributing/#how-to-request-a-feature","text":"Request features on the Issue Tracker .","title":"How to request a feature"},{"location":"contributing/#how-to-set-up-your-development-environment","text":"Preferred method Install the package and setup your workstation pip install workstation-cli --user workstation-install If you don't want to setup your workstation with this package make sure to have Python 3.8+ and the following tools: Poetry Nox nox-poetry Fork the repository on GitHub , and clone the fork to your local machine. On first install pyenv install -s 3 .8.12 pyenv local 3 .8.12 poetry lock nox -s pre-commit -- install nox -s pre-commit -- install --hook-type commit-msg","title":"How to set up your development environment"},{"location":"contributing/#how-to-run-your-code","text":"First, install the project and its dependencies to the Poetry environment: poetry install Run interactive session Invoke command-line interface poetry run python poetry run workstation-install","title":"How to run your code"},{"location":"contributing/#how-to-test-the-project","text":"Run the test suite using Nox : $ nox -r","title":"How to test the project"},{"location":"contributing/#how-to-submit-changes","text":"Create a branch for your changes: git switch --create my-new-branch main Create a series of small, single-purpose commits: git add <files> git commit Push your branch to GitHub: git push --set-upstream origin my-topic-branch Open a pull request to submit changes to this project. Select your branch from the Branch menu. Click New pull request . Enter the title for the pull request. Enter a description for the pull request. Apply a label Click Create pull request . Your pull request needs to meet the following guidelines for acceptance: The Nox test suite must pass without errors and warnings. Include unit tests. This project maintains 100% code coverage. If your changes add functionality, update the documentation accordingly. Release notes are pre-filled with the titles of merged pull requests.","title":"How to submit changes"},{"location":"contributing/#how-to-accept-a-pull-request","text":"Before accepting a pull request, go through the following checklist: The PR must pass all checks. The PR must have a descriptive title. The PR should be labelled with the kind of change. If all checks are marked as passed, merge the pull request using the squash-merge strategy: Click Squash and Merge . Click Confirm squash and merge . Click Delete branch .","title":"How to accept a pull request"},{"location":"contributing/#how-to-make-a-release","text":"Before making a release, go through the following checklist: All pull requests for the release have been merged. The default branch passes all checks. Releases are triggered by a version bump on the default branch. Do this in a separate pull request: Switch to a branch. Bump the version using the release session in nox . Push to GitHub. Open a pull request. Merge the pull request. The individual steps for bumping the version are: git switch --create release main nox -s release -- --patch git push origin release To let semantic-release decide what version number to update to, use: nox -s release Before merging the pull request for the release, go through the following checklist: The pull request passes all checks. The development release on TestPyPI_ looks good. All pull requests for the release have been merged.","title":"How to make a release"}]}